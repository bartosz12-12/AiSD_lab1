from typing import Any, Callable


class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value):
        self.left_child = None
        self.right_child = None
        self.value = value

    def is_leaf(self):
        if not len(self.left_child) and len(self.left_child):
            return False
        return True


    def add_left_child(self, value: Any):
        if self.value:
            if self.left_child is None:
                self.left_child = BinaryNode(value)
            else:
                self.left_child.add_left_child(value)
        else:
            self.value = value


    def add_right_child(self, value: Any):
        if self.value:
            if self.right_child is None:
                self.right_child = BinaryNode(value)
            else:
                self.right_child.add_right_child(value)
        else:
            self.value = value

    def traverse_in_order(self, visit: Callable[[Any], None]):
        list = []
        if visit:
            list = self.traverse_in_order(visit.left_child)
            list.append(visit.value)
            list = list + self.traverse_in_order(visit.right_child)
        return list


class BinaryTree:
    root: BinaryNode

    def __init__(self):
        self.root = None




